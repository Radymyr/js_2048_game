{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_define_property.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0(obj, key, value) {\n    if (key in obj) Object.defineProperty(obj, key, {\n        value: value,\n        enumerable: true,\n        configurable: true,\n        writable: true\n    });\n    else obj[key] = value;\n    return obj;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ function $3d28d7f1aac198f5$var$copyState(state) {\n    return state.map(function(row) {\n        return (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(row);\n    });\n}\nvar $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game() {\n        var initialState = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : this.initialStateDefault;\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ // initialStateDefault = [\n        //   [0, 16, 0, 8],\n        //       [8, 0, 16, 0],\n        //       [0, 8, 0, 32],\n        //       [32, 0, 8, 0],\n        // ];\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"initialStateDefault\", [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ]);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"count\", 4);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"score\", 0);\n        (0, $cd5a47cf8ef6d766$export$1e71eb4bef00f6b0)(this, \"status\", \"idle\");\n        this.initialState = $3d28d7f1aac198f5$var$copyState(initialState);\n        this.initialStateDefault = $3d28d7f1aac198f5$var$copyState(initialState);\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"checkVictory\",\n            value: function checkVictory() {\n                var isVictory = !!this.initialState.flat().find(function(item) {\n                    return item === 2048;\n                });\n                if (isVictory) this.status = \"win\";\n            }\n        },\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                if (!this.isStatusPlaying()) return;\n                var isUpdated = false;\n                for(var row = 0; row < this.count; row++){\n                    for(var col = 0; col < this.count; col++)for(var innerColumn = col + 1; innerColumn < this.count; innerColumn++){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[row][innerColumn];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[row][innerColumn] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[row][innerColumn] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) continue;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    this.transposeState();\n                    this.checkVictory();\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                if (!this.isStatusPlaying()) return;\n                var isUpdated = false;\n                for(var row = 0; row < this.count; row++){\n                    for(var col = this.count - 1; col >= 0; col--)for(var innerColumn = col - 1; innerColumn >= 0; innerColumn--){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[row][innerColumn];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[row][innerColumn] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[row][innerColumn] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) break;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    this.transposeState();\n                    this.checkVictory();\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                if (!this.isStatusPlaying()) return;\n                var isUpdated = false;\n                for(var col = 0; col < this.count; col++){\n                    for(var row = 0; row < this.count; row++)for(var innerRow = row + 1; innerRow < this.count; innerRow++){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[innerRow][col];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[innerRow][col] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[innerRow][col] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) continue;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    this.transposeState();\n                    this.checkVictory();\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                if (!this.isStatusPlaying()) return;\n                var isUpdated = false;\n                for(var col = 0; col < this.count; col++){\n                    for(var row = this.count - 1; row >= 0; row--)for(var innerRow = row - 1; innerRow >= 0; innerRow--){\n                        var currentItem = this.initialState[row][col];\n                        var nextItem = this.initialState[innerRow][col];\n                        if (currentItem === 0 && nextItem !== 0) {\n                            this.initialState[row][col] = nextItem;\n                            this.initialState[innerRow][col] = 0;\n                            isUpdated = true;\n                            continue;\n                        }\n                        if (currentItem !== 0 && nextItem === currentItem) {\n                            var mergedValue = currentItem * 2;\n                            this.initialState[row][col] = mergedValue;\n                            this.initialState[innerRow][col] = 0;\n                            this.score += mergedValue;\n                            isUpdated = true;\n                            break;\n                        }\n                        if (currentItem !== 0 && nextItem === 0) continue;\n                        if (currentItem !== 0 && nextItem !== currentItem) break;\n                    }\n                }\n                if (isUpdated) {\n                    this.transposeState();\n                    this.checkVictory();\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                return this.score;\n            }\n        },\n        {\n            key: \"isStatusPlaying\",\n            value: function isStatusPlaying() {\n                return this.status === \"playing\";\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                return this.initialState;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                return this.status;\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                if (this.status === \"playing\") return;\n                this.transposeState();\n                this.transposeState();\n                this.status = \"playing\";\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.initialState = this.initialStateDefault;\n                this.status = \"idle\";\n                this.score = 0;\n            }\n        },\n        {\n            key: \"generateNewNumber\",\n            value: function generateNewNumber() {\n                return Math.random() < 0.9 ? 2 : 4;\n            }\n        },\n        {\n            key: \"count\",\n            get: function get() {\n                return this.initialState.flat().filter(function(n) {\n                    return !n;\n                }).length;\n            }\n        },\n        {\n            key: \"getRandomNumber\",\n            value: function getRandomNumber() {\n                return Math.floor(Math.random() * this.count) + 1;\n            }\n        },\n        {\n            key: \"transposeState\",\n            value: function transposeState() {\n                var randomNumber = this.getRandomNumber();\n                var counter = 0;\n                for(var col = 0; col < 4; col++)for(var row = 0; row < 4; row++){\n                    if (this.initialState[row][col] === 0) {\n                        counter++;\n                        var startRandomValue = counter === randomNumber ? this.generateNewNumber() : 0;\n                        this.initialState[row][col] = startRandomValue;\n                        continue;\n                    }\n                    this.initialState[row][col] = this.initialState[row][col];\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\nwindow.game = $197cd56b15c33885$var$game;\n// Write your code here\nvar $197cd56b15c33885$var$startButton = document.querySelector(\".start\");\n$197cd56b15c33885$var$startButton.addEventListener(\"click\", function() {\n    $197cd56b15c33885$var$game.start();\n    $197cd56b15c33885$var$rerenderGrid();\n});\ndocument.addEventListener(\"keydown\", function(param) {\n    var key = param.key;\n    if (key === \"ArrowLeft\") $197cd56b15c33885$var$game.moveLeft();\n    if (key === \"ArrowRight\") $197cd56b15c33885$var$game.moveRight();\n    if (key === \"ArrowUp\") $197cd56b15c33885$var$game.moveUp();\n    if (key === \"ArrowDown\") $197cd56b15c33885$var$game.moveDown();\n    document.querySelector(\".game-score\").innerText = $197cd56b15c33885$var$game.getScore();\n    $197cd56b15c33885$var$rerenderGrid();\n});\nfunction $197cd56b15c33885$var$rerenderGrid() {\n    $197cd56b15c33885$var$game.getState().forEach(function(row, index) {\n        row.forEach(function(value, innerIndex) {\n            var element = document.querySelectorAll(\".field-row\")[index].children[innerIndex];\n            element.innerText = value;\n            element.className = \"\";\n            element.classList.add(\"field-cell\", \"field-cell--\".concat(value));\n        });\n    });\n}\n\n})();\n//# sourceMappingURL=index.831f87be.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nwindow.game = game;\n// Write your code here\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  rerenderGrid();\n});\n\ndocument.addEventListener('keydown', ({ key }) => {\n  if (key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  document.querySelector('.game-score').innerText = game.getScore();\n  rerenderGrid();\n});\n\nfunction rerenderGrid() {\n  game.getState().forEach((row, index) => {\n    row.forEach((value, innerIndex) => {\n      const element\n      = document.querySelectorAll('.field-row')[index].children[innerIndex];\n\n      element.innerText = value;\n\n      element.className = '';\n      element.classList.add('field-cell', `field-cell--${value}`);\n    });\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\n\nfunction copyState(state) {\n  return state.map(row => [...row]);\n}\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  // initialStateDefault = [\n  //   [0, 16, 0, 8],\n  //       [8, 0, 16, 0],\n  //       [0, 8, 0, 32],\n  //       [32, 0, 8, 0],\n  // ];\n\n  initialStateDefault = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  count = 4;\n\n  score = 0;\n  status = 'idle';\n\n  constructor(initialState = this.initialStateDefault) {\n    this.initialState = copyState(initialState);\n    this.initialStateDefault = copyState(initialState);\n  }\n\n  checkVictory() {\n    const isVictory = !!this.initialState.flat().find((item) => item === 2048);\n\n    if (isVictory) {\n      this.status = 'win';\n    }\n  }\n\n  moveLeft() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    let isUpdated = false;\n    for (let row = 0; row < this.count; row++) {\n      for (let col = 0; col < this.count; col++) {\n        for (let innerColumn = col + 1; innerColumn < this.count; innerColumn++) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true\n            break;\n          }\n\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n  moveRight() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n\n    let isUpdated = false;\n\n    for (let row = 0; row < this.count; row++) {\n      for (let col = this.count - 1; col >= 0; col--) {\n        for (let innerColumn = col - 1; innerColumn >= 0; innerColumn--) {\n\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            break;\n          }\n\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n  moveUp() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n\n    let isUpdated = false;\n\n    for (let col = 0; col < this.count; col++) {\n      for (let row = 0; row < this.count; row++) {\n        for (let innerRow = row + 1; innerRow < this.count; innerRow++) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n  moveDown() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    let isUpdated = false;\n\n    for (let col = 0; col < this.count; col++) {\n      for (let row = this.count - 1; row >= 0; row--) {\n        for (let innerRow = row - 1; innerRow >= 0; innerRow--) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  isStatusPlaying() {\n    return this.status === 'playing';\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'playing') {\n      return;\n    }\n    this.transposeState();\n    this.transposeState();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.initialState = this.initialStateDefault;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  generateNewNumber() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  get count() {\n    return this.initialState.flat().filter(n => !n).length;\n  }\n\n  getRandomNumber() {\n    return Math.floor(Math.random() * this.count) + 1;\n  }\n\n  transposeState() {\n    const randomNumber = this.getRandomNumber();\n    let counter = 0;\n\n    for (let col = 0; col < 4; col++) {\n\n      for (let row = 0; row < 4; row++) {\n        if (this.initialState[row][col] === 0) {\n          counter++;\n\n          const startRandomValue = counter === randomNumber\n            ? this.generateNewNumber() : 0;\n\n          this.initialState[row][col] = (startRandomValue);\n          continue;\n        }\n        this.initialState[row][col] = (this.initialState[row][col]);\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","export function _define_property(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });\n    } else obj[key] = value;\n\n    return obj;\n}\nexport { _define_property as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n"],"names":["$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$cd5a47cf8ef6d766$export$1e71eb4bef00f6b0","obj","value","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","arr2","Array","$3d28d7f1aac198f5$var$copyState","state","map","row","isArray","iter","Symbol","iterator","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","TypeError","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","arguments","initialStateDefault","instance","Constructor","flat","find","item","status","isStatusPlaying","isUpdated","count","col","innerColumn","currentItem","nextItem","mergedValue","score","transposeState","checkVictory","innerRow","Math","random","get","filter","floor","randomNumber","getRandomNumber","counter","startRandomValue","generateNewNumber","$197cd56b15c33885$var$rerenderGrid","getState","forEach","index","innerIndex","element","document","querySelectorAll","children","innerText","className","classList","add","concat","window","game","$197cd56b15c33885$var$startButton","querySelector","addEventListener","start","param","moveLeft","moveRight","moveUp","moveDown","getScore"],"version":3,"file":"index.831f87be.js.map"}