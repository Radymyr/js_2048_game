{"mappings":"AESA,SAAS,EAAU,CAAK,EACtB,OAAO,EAAM,GAAG,CAAC,AAAA,GAAO,IAAI,EAAI,CAClC,CDPA,MAAM,EAAO,ICSb,MAuBE,oBAAsB,CACpB,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACZ,CAAC,EAAG,EAAG,EAAG,EAAE,CACb,AAAC,AAEF,CAAA,MAAQ,CAAE,AAEV,CAAA,MAAQ,CAAE,AACV,CAAA,OAAS,MAAO,AAEhB,aAAY,EAAe,IAAI,CAAC,mBAAmB,CAAE,CACnD,IAAI,CAAC,YAAY,CAAG,EAAU,GAC9B,IAAI,CAAC,mBAAmB,CAAG,EAAU,EACvC,CAEA,cAAe,CACO,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,IAAI,CAAC,AAAC,GAAS,AAAS,OAAT,IAG1D,CAAA,IAAI,CAAC,MAAM,CAAG,KADhB,CAGF,CAEA,UAAW,CACT,GAAI,CAAC,IAAI,CAAC,eAAe,GACvB,OAEF,IAAI,EAAY,CAAA,EAChB,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAE,IAClC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAE,IAClC,IAAK,IAAI,EAAc,EAAM,EAAG,EAAc,IAAI,CAAC,KAAK,CAAE,IAAe,CACvE,IAAM,EAAc,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CACzC,EAAW,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAY,CAEpD,GAAI,AAAgB,IAAhB,GAAqB,AAAa,IAAb,EAAgB,CACvC,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAY,CAAG,EACtC,EAAY,CAAA,EACZ,QACF,CAEA,GAAI,AAAgB,IAAhB,GAAqB,IAAa,EAAa,CACjD,IAAM,EAAc,AAAc,EAAd,CACpB,CAAA,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAY,CAAG,EACtC,IAAI,CAAC,KAAK,EAAI,EACd,EAAY,CAAA,EACZ,KACF,CAGA,GAAI,CAAA,AAAgB,IAAhB,GAAqB,AAAa,IAAb,CAAa,GAIlC,AAAgB,IAAhB,GAAqB,IAAa,EACpC,KAEJ,CAIA,IACF,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,YAAY,GAErB,CACA,WAAY,CACV,GAAI,CAAC,IAAI,CAAC,eAAe,GACvB,OAGF,IAAI,EAAY,CAAA,EAEhB,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAE,IAClC,IAAK,IAAI,EAAM,IAAI,CAAC,KAAK,CAAG,EAAG,GAAO,EAAG,IACvC,IAAK,IAAI,EAAc,EAAM,EAAG,GAAe,EAAG,IAAe,CAE/D,IAAM,EAAc,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CACzC,EAAW,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAY,CAEpD,GAAI,AAAgB,IAAhB,GAAqB,AAAa,IAAb,EAAgB,CACvC,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAY,CAAG,EACtC,EAAY,CAAA,EACZ,QACF,CAEA,GAAI,AAAgB,IAAhB,GAAqB,IAAa,EAAa,CACjD,IAAM,EAAc,AAAc,EAAd,CACpB,CAAA,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAY,CAAG,EACtC,IAAI,CAAC,KAAK,EAAI,EACd,EAAY,CAAA,EACZ,KACF,CAEA,GAAoB,IAAhB,GAAqB,AAAa,IAAb,GAKrB,AAAgB,IAAhB,GAAqB,IAAa,EAJpC,KAOJ,CAIA,IACF,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,YAAY,GAErB,CACA,QAAS,CACP,GAAI,CAAC,IAAI,CAAC,eAAe,GACvB,OAGF,IAAI,EAAY,CAAA,EAEhB,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAE,IAClC,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAE,IAClC,IAAK,IAAI,EAAW,EAAM,EAAG,EAAW,IAAI,CAAC,KAAK,CAAE,IAAY,CAC9D,IAAM,EAAc,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CACzC,EAAW,IAAI,CAAC,YAAY,CAAC,EAAS,CAAC,EAAI,CAEjD,GAAI,AAAgB,IAAhB,GAAqB,AAAa,IAAb,EAAgB,CACvC,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAS,CAAC,EAAI,CAAG,EACnC,EAAY,CAAA,EACZ,QACF,CAEA,GAAI,AAAgB,IAAhB,GAAqB,IAAa,EAAa,CACjD,IAAM,EAAc,AAAc,EAAd,CACpB,CAAA,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAS,CAAC,EAAI,CAAG,EACnC,IAAI,CAAC,KAAK,EAAI,EACd,EAAY,CAAA,EACZ,KACF,CAEA,GAAI,CAAA,AAAgB,IAAhB,GAAqB,AAAa,IAAb,CAAa,GAIlC,AAAgB,IAAhB,GAAqB,IAAa,EACpC,KAEJ,CAIA,IACF,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,YAAY,GAErB,CACA,UAAW,CACT,GAAI,CAAC,IAAI,CAAC,eAAe,GACvB,OAEF,IAAI,EAAY,CAAA,EAEhB,IAAK,IAAI,EAAM,EAAG,EAAM,IAAI,CAAC,KAAK,CAAE,IAClC,IAAK,IAAI,EAAM,IAAI,CAAC,KAAK,CAAG,EAAG,GAAO,EAAG,IACvC,IAAK,IAAI,EAAW,EAAM,EAAG,GAAY,EAAG,IAAY,CACtD,IAAM,EAAc,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CACzC,EAAW,IAAI,CAAC,YAAY,CAAC,EAAS,CAAC,EAAI,CAEjD,GAAI,AAAgB,IAAhB,GAAqB,AAAa,IAAb,EAAgB,CACvC,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAS,CAAC,EAAI,CAAG,EACnC,EAAY,CAAA,EACZ,QACF,CAEA,GAAI,AAAgB,IAAhB,GAAqB,IAAa,EAAa,CACjD,IAAM,EAAc,AAAc,EAAd,CACpB,CAAA,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAG,EAC9B,IAAI,CAAC,YAAY,CAAC,EAAS,CAAC,EAAI,CAAG,EACnC,IAAI,CAAC,KAAK,EAAI,EACd,EAAY,CAAA,EACZ,KACF,CAEA,GAAI,CAAA,AAAgB,IAAhB,GAAqB,AAAa,IAAb,CAAa,GAIlC,AAAgB,IAAhB,GAAqB,IAAa,EACpC,KAEJ,CAGA,IACF,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,YAAY,GAErB,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,KAAK,AACnB,CAEA,iBAAkB,CAChB,MAAO,AAAgB,YAAhB,IAAI,CAAC,MAAM,AACpB,CAKA,UAAW,CACT,OAAO,IAAI,CAAC,YAAY,AAC1B,CAYA,WAAY,CACV,OAAO,IAAI,CAAC,MAAM,AACpB,CAKA,OAAQ,CACc,YAAhB,IAAI,CAAC,MAAM,GAGf,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,cAAc,GACnB,IAAI,CAAC,MAAM,CAAG,UAChB,CAKA,SAAU,CACR,IAAI,CAAC,YAAY,CAAG,IAAI,CAAC,mBAAmB,CAC5C,IAAI,CAAC,MAAM,CAAG,OACd,IAAI,CAAC,KAAK,CAAG,CACf,CAEA,mBAAoB,CAClB,OAAO,AAAgB,GAAhB,KAAK,MAAM,GAAW,EAAI,CACnC,CAEA,IAAI,OAAQ,CACV,OAAO,IAAI,CAAC,YAAY,CAAC,IAAI,GAAG,MAAM,CAAC,AAAA,GAAK,CAAC,GAAG,MAAM,AACxD,CAEA,iBAAkB,CAChB,OAAO,KAAK,KAAK,CAAC,KAAK,MAAM,GAAK,IAAI,CAAC,KAAK,EAAI,CAClD,CAEA,gBAAiB,CACf,IAAM,EAAe,IAAI,CAAC,eAAe,GACrC,EAAU,EAEd,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAEzB,IAAK,IAAI,EAAM,EAAG,EAAM,EAAG,IAAO,CAChC,GAAI,AAAgC,IAAhC,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAQ,CAGrC,IAAM,EAAmB,EAAA,IAAY,EACjC,IAAI,CAAC,iBAAiB,GAAK,CAE/B,CAAA,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAI,EAC/B,QACF,CACA,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,CAAI,IAAI,CAAC,YAAY,CAAC,EAAI,CAAC,EAAI,AAC5D,CAEJ,CACF,EDjSA,SAAS,IACP,EAAK,QAAQ,GAAG,OAAO,CAAC,CAAC,EAAK,KAC5B,EAAI,OAAO,CAAC,CAAC,EAAO,KAClB,IAAM,EACJ,SAAS,gBAAgB,CAAC,aAAa,CAAC,EAAM,CAAC,QAAQ,CAAC,EAAW,AAErE,CAAA,EAAQ,SAAS,CAAG,EAEpB,EAAQ,SAAS,CAAG,GACpB,EAAQ,SAAS,CAAC,GAAG,CAAC,aAAc,CAAC,YAAY,EAAE,EAAM,CAAC,CAC5D,EACF,EACF,CA3CA,OAAO,IAAI,CAAG,EAKd,AAFoB,SAAS,aAAa,CAAC,UAE/B,gBAAgB,CAAC,QAAS,KACpC,EAAK,KAAK,GACV,GACF,GAEA,SAAS,gBAAgB,CAAC,UAAW,CAAC,CAAA,IAAE,CAAG,CAAE,IAC/B,cAAR,GACF,EAAK,QAAQ,GAGH,eAAR,GACF,EAAK,SAAS,GAGJ,YAAR,GACF,EAAK,MAAM,GAGD,cAAR,GACF,EAAK,QAAQ,GAGf,SAAS,aAAa,CAAC,eAAe,SAAS,CAAG,EAAK,QAAQ,GAC/D,GACF","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ function $a5fd07fa01589658$var$copyState(state) {\n    return state.map((row)=>[\n            ...row\n        ]);\n}\nclass $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ // initialStateDefault = [\n    //   [0, 16, 0, 8],\n    //       [8, 0, 16, 0],\n    //       [0, 8, 0, 32],\n    //       [32, 0, 8, 0],\n    // ];\n    initialStateDefault = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ];\n    count = 4;\n    score = 0;\n    status = \"idle\";\n    constructor(initialState = this.initialStateDefault){\n        this.initialState = $a5fd07fa01589658$var$copyState(initialState);\n        this.initialStateDefault = $a5fd07fa01589658$var$copyState(initialState);\n    }\n    checkVictory() {\n        const isVictory = !!this.initialState.flat().find((item)=>item === 2048);\n        if (isVictory) this.status = \"win\";\n    }\n    moveLeft() {\n        if (!this.isStatusPlaying()) return;\n        let isUpdated = false;\n        for(let row = 0; row < this.count; row++){\n            for(let col = 0; col < this.count; col++)for(let innerColumn = col + 1; innerColumn < this.count; innerColumn++){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[row][innerColumn];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[row][innerColumn] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[row][innerColumn] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) continue;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            this.transposeState();\n            this.checkVictory();\n        }\n    }\n    moveRight() {\n        if (!this.isStatusPlaying()) return;\n        let isUpdated = false;\n        for(let row = 0; row < this.count; row++){\n            for(let col = this.count - 1; col >= 0; col--)for(let innerColumn = col - 1; innerColumn >= 0; innerColumn--){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[row][innerColumn];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[row][innerColumn] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[row][innerColumn] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) break;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            this.transposeState();\n            this.checkVictory();\n        }\n    }\n    moveUp() {\n        if (!this.isStatusPlaying()) return;\n        let isUpdated = false;\n        for(let col = 0; col < this.count; col++){\n            for(let row = 0; row < this.count; row++)for(let innerRow = row + 1; innerRow < this.count; innerRow++){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[innerRow][col];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[innerRow][col] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[innerRow][col] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) continue;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            this.transposeState();\n            this.checkVictory();\n        }\n    }\n    moveDown() {\n        if (!this.isStatusPlaying()) return;\n        let isUpdated = false;\n        for(let col = 0; col < this.count; col++){\n            for(let row = this.count - 1; row >= 0; row--)for(let innerRow = row - 1; innerRow >= 0; innerRow--){\n                const currentItem = this.initialState[row][col];\n                const nextItem = this.initialState[innerRow][col];\n                if (currentItem === 0 && nextItem !== 0) {\n                    this.initialState[row][col] = nextItem;\n                    this.initialState[innerRow][col] = 0;\n                    isUpdated = true;\n                    continue;\n                }\n                if (currentItem !== 0 && nextItem === currentItem) {\n                    const mergedValue = currentItem * 2;\n                    this.initialState[row][col] = mergedValue;\n                    this.initialState[innerRow][col] = 0;\n                    this.score += mergedValue;\n                    isUpdated = true;\n                    break;\n                }\n                if (currentItem !== 0 && nextItem === 0) continue;\n                if (currentItem !== 0 && nextItem !== currentItem) break;\n            }\n        }\n        if (isUpdated) {\n            this.transposeState();\n            this.checkVictory();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    isStatusPlaying() {\n        return this.status === \"playing\";\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.initialState;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.status;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        if (this.status === \"playing\") return;\n        this.transposeState();\n        this.transposeState();\n        this.status = \"playing\";\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.initialState = this.initialStateDefault;\n        this.status = \"idle\";\n        this.score = 0;\n    }\n    generateNewNumber() {\n        return Math.random() < 0.9 ? 2 : 4;\n    }\n    get count() {\n        return this.initialState.flat().filter((n)=>!n).length;\n    }\n    getRandomNumber() {\n        return Math.floor(Math.random() * this.count) + 1;\n    }\n    transposeState() {\n        const randomNumber = this.getRandomNumber();\n        let counter = 0;\n        for(let col = 0; col < 4; col++)for(let row = 0; row < 4; row++){\n            if (this.initialState[row][col] === 0) {\n                counter++;\n                const startRandomValue = counter === randomNumber ? this.generateNewNumber() : 0;\n                this.initialState[row][col] = startRandomValue;\n                continue;\n            }\n            this.initialState[row][col] = this.initialState[row][col];\n        }\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nwindow.game = $09e991522ca7e64e$var$game;\n// Write your code here\nconst $09e991522ca7e64e$var$startButton = document.querySelector(\".start\");\n$09e991522ca7e64e$var$startButton.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$rerenderGrid();\n});\ndocument.addEventListener(\"keydown\", ({ key: key })=>{\n    if (key === \"ArrowLeft\") $09e991522ca7e64e$var$game.moveLeft();\n    if (key === \"ArrowRight\") $09e991522ca7e64e$var$game.moveRight();\n    if (key === \"ArrowUp\") $09e991522ca7e64e$var$game.moveUp();\n    if (key === \"ArrowDown\") $09e991522ca7e64e$var$game.moveDown();\n    document.querySelector(\".game-score\").innerText = $09e991522ca7e64e$var$game.getScore();\n    $09e991522ca7e64e$var$rerenderGrid();\n});\nfunction $09e991522ca7e64e$var$rerenderGrid() {\n    $09e991522ca7e64e$var$game.getState().forEach((row, index)=>{\n        row.forEach((value, innerIndex)=>{\n            const element = document.querySelectorAll(\".field-row\")[index].children[innerIndex];\n            element.innerText = value;\n            element.className = \"\";\n            element.classList.add(\"field-cell\", `field-cell--${value}`);\n        });\n    });\n}\n\n\n//# sourceMappingURL=index.3e3f4247.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nwindow.game = game;\n// Write your code here\n\nconst startButton = document.querySelector('.start');\n\nstartButton.addEventListener('click', () => {\n  game.start();\n  rerenderGrid();\n});\n\ndocument.addEventListener('keydown', ({ key }) => {\n  if (key === 'ArrowLeft') {\n    game.moveLeft();\n  }\n\n  if (key === 'ArrowRight') {\n    game.moveRight();\n  }\n\n  if (key === 'ArrowUp') {\n    game.moveUp();\n  }\n\n  if (key === 'ArrowDown') {\n    game.moveDown();\n  }\n\n  document.querySelector('.game-score').innerText = game.getScore();\n  rerenderGrid();\n});\n\nfunction rerenderGrid() {\n  game.getState().forEach((row, index) => {\n    row.forEach((value, innerIndex) => {\n      const element\n      = document.querySelectorAll('.field-row')[index].children[innerIndex];\n\n      element.innerText = value;\n\n      element.className = '';\n      element.classList.add('field-cell', `field-cell--${value}`);\n    });\n  });\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\n\n\nfunction copyState(state) {\n  return state.map(row => [...row]);\n}\n\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n\n  // initialStateDefault = [\n  //   [0, 16, 0, 8],\n  //       [8, 0, 16, 0],\n  //       [0, 8, 0, 32],\n  //       [32, 0, 8, 0],\n  // ];\n\n  initialStateDefault = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  count = 4;\n\n  score = 0;\n  status = 'idle';\n\n  constructor(initialState = this.initialStateDefault) {\n    this.initialState = copyState(initialState);\n    this.initialStateDefault = copyState(initialState);\n  }\n\n  checkVictory() {\n    const isVictory = !!this.initialState.flat().find((item) => item === 2048);\n\n    if (isVictory) {\n      this.status = 'win';\n    }\n  }\n\n  moveLeft() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    let isUpdated = false;\n    for (let row = 0; row < this.count; row++) {\n      for (let col = 0; col < this.count; col++) {\n        for (let innerColumn = col + 1; innerColumn < this.count; innerColumn++) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true\n            break;\n          }\n\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n  moveRight() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n\n    let isUpdated = false;\n\n    for (let row = 0; row < this.count; row++) {\n      for (let col = this.count - 1; col >= 0; col--) {\n        for (let innerColumn = col - 1; innerColumn >= 0; innerColumn--) {\n\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[row][innerColumn];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[row][innerColumn] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[row][innerColumn] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            break;\n          }\n\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n  moveUp() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n\n    let isUpdated = false;\n\n    for (let col = 0; col < this.count; col++) {\n      for (let row = 0; row < this.count; row++) {\n        for (let innerRow = row + 1; innerRow < this.count; innerRow++) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n  moveDown() {\n    if (!this.isStatusPlaying()) {\n      return;\n    }\n    let isUpdated = false;\n\n    for (let col = 0; col < this.count; col++) {\n      for (let row = this.count - 1; row >= 0; row--) {\n        for (let innerRow = row - 1; innerRow >= 0; innerRow--) {\n          const currentItem = this.initialState[row][col];\n          const nextItem = this.initialState[innerRow][col];\n\n          if (currentItem === 0 && nextItem !== 0) {\n            this.initialState[row][col] = nextItem;\n            this.initialState[innerRow][col] = 0;\n            isUpdated = true;\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem === currentItem) {\n            const mergedValue = currentItem * 2;\n            this.initialState[row][col] = mergedValue;\n            this.initialState[innerRow][col] = 0;\n            this.score += mergedValue;\n            isUpdated = true;\n            break;\n          }\n\n          if (currentItem !== 0 && nextItem === 0) {\n            continue;\n          }\n\n          if (currentItem !== 0 && nextItem !== currentItem) {\n            break;\n          }\n        }\n      }\n    }\n    if (isUpdated) {\n      this.transposeState();\n      this.checkVictory();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  isStatusPlaying() {\n    return this.status === 'playing';\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.initialState;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.status;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    if (this.status === 'playing') {\n      return;\n    }\n    this.transposeState();\n    this.transposeState();\n    this.status = 'playing';\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.initialState = this.initialStateDefault;\n    this.status = 'idle';\n    this.score = 0;\n  }\n\n  generateNewNumber() {\n    return Math.random() < 0.9 ? 2 : 4;\n  }\n\n  get count() {\n    return this.initialState.flat().filter(n => !n).length;\n  }\n\n  getRandomNumber() {\n    return Math.floor(Math.random() * this.count) + 1;\n  }\n\n  transposeState() {\n    const randomNumber = this.getRandomNumber();\n    let counter = 0;\n\n    for (let col = 0; col < 4; col++) {\n\n      for (let row = 0; row < 4; row++) {\n        if (this.initialState[row][col] === 0) {\n          counter++;\n\n          const startRandomValue = counter === randomNumber\n            ? this.generateNewNumber() : 0;\n\n          this.initialState[row][col] = (startRandomValue);\n          continue;\n        }\n        this.initialState[row][col] = (this.initialState[row][col]);\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$var$copyState","state","map","row","$09e991522ca7e64e$var$game","initialStateDefault","count","score","status","constructor","initialState","checkVictory","flat","find","item","moveLeft","isStatusPlaying","isUpdated","col","innerColumn","currentItem","nextItem","mergedValue","transposeState","moveRight","moveUp","innerRow","moveDown","getScore","getState","getStatus","start","restart","generateNewNumber","Math","random","filter","n","length","getRandomNumber","floor","randomNumber","counter","startRandomValue","$09e991522ca7e64e$var$rerenderGrid","forEach","index","value","innerIndex","element","document","querySelectorAll","children","innerText","className","classList","add","window","game","$09e991522ca7e64e$var$startButton","querySelector","addEventListener","key"],"version":3,"file":"index.3e3f4247.js.map"}